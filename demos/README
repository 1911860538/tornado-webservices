This document describes how to run the demos web services.

Running the DemoService.py example:
-----------------------------------

Running:

	$ python DemoServices.py

The example display four separate services.

1. EchoService (http://localhost:8080/EchoService?wsdl):

	For an input string responds with an echo message.

2. CountService (http://localhost:8080/CountService?wsdl):

	The operation receives as input an python list an returns the numbers of 
	elements in the list.

	This service used _params=xmltypes.Array(xmltypes.String) like input, 
	what mean his input parameter is a array of string elements.
	
	xmltypes.Array(xmltypes.String) create an xml element with maxOccurs
	property with the value "unbounded" for wsdl.

3. DivService (http://localhost:8080/DivService?wsdl):

	The operation receives as input two float numbers and returns the result 
	of the deivision of this numbers.

4.- Finally, FibonacciService (http://localhost:8080/FibonacciService?wsdl):

	Returns a list with the fibonacci's numbers.

	This services return an _return=xmltypes.Array(xmltypes.Integer) what
	mean the operation of service return an list of integer elements.

	xmltypes.Array(xmltypes.Integer), create an xml element with maxOccurs
	property with the value "unbounded" for wsdl.

You can probe this services with SoapUI or creating a web services client with 
your favorite programming language.

Running the ProducService.py example:
-------------------------------------

Running:

	$ python ProductService.py

1.- ProductService (http://localhost:8080/ProductService?wsdl):

	This web service uses complextypes by transforming a python class in an
	xml schema within the definition of the schemas of WSDL.

	For example:
		
		from tornadows import complextypes
	
		class Product(complextypes.ComplexType):
			id    = complextypes.IntegerPropert()
			name  = complextypes.StringProperty()
			price = complextypes.FloatProperty()
			stock = complextypes.IntegerProperty()

	The class is tranformed into the following xml schema.

		 <xsd:complexType name="Product" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
			<xsd:sequence>
				<xsd:element name="id"    type="xsd:integer"/>
				<xsd:element name="name"  type="xsd:string"/>
				<xsd:element name="price" type="xsd:float"/>
				<xsd:element name="stock" type="xsd:integer"/>
			</xsd:sequence>
		</xsd:complexType>

	In the WSDL, xml schema is seen as follows.

		<wsdl:types>
			<xsd:schema targetNamespace="http://127.0.1.1:8080/ProductService/getProduct">
				<xsd:complexType name="Product">
					<xsd:sequence>
						<xsd:element name="id"    type="xsd:integer"/>
						<xsd:element name="name"  type="xsd:string"/>
						<xsd:element name="price" type="xsd:float"/>
						<xsd:element name="stock" type="xsd:integer"/>
					</xsd:sequence>
				</xsd:complexType>
				<xsd:element name="Product" type="tns:Product"/>
			</xsd:schema>
		</wsdl:types>

	In the example, the SOAP envelope is seen as follows.

	The request is:

		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://127.0.1.1:8080/ProductService/getProduct">
   			<soapenv:Header/>
   			<soapenv:Body>
      				<get:Input>
         				<idProduct>1</idProduct>
      				</get:Input>
   			</soapenv:Body>
		</soapenv:Envelope>
 	
	The response of the web service is:

		<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
   			<soapenv:Header/>
   				<soapenv:Body>
      					<Product>
         					<id>1</id>
         					<name>COMPUTER</name>
         					<price>1000.5</price>
         					<stock>100</stock>
      					</Product>
   				</soapenv:Body>
			</soapenv:Envelope>
	
	You can use the SoapUI for testing. See the code in the ProductService.py

Running the ProducListService.py example:
-----------------------------------------

Running:
	$ python ProductListService.py

	1.- ProductListService (http://localhost:8080/ProductListService?wsdl):

	    The web service implements an operation to retrieve a list of products.
	    Python types are used to define the attributes of the class; and python 
	    list to store a set of Product.

Running the UserRolesService.py example:
----------------------------------------

Running:

	$ python UserRolesService.py

	1.- UserRolesService (http://localhost:8080/UserRolesService?wsdl):

	    This web service uses python list into xml complextypes. This allows create data structures more 
	    complex.

	    The service receive a idlist (integer) and returns a list of users with username (str) and another
	    python list with roles.

	    For example:
		
	    from tornadows import complextypes
	
	    class User(complextypes.ComplexType):
		username  = str
		roles     = [str]

	    class ListOfUser(complextypes.ComplexType):
		idlist = int
		list   = [User]

	    The classes are tranformed into the following xml schema.

	    <xsd:schema targetNamespace="http://127.0.1.1:8080/UserRolesService/getUsers">
		<xsd:complexType name="paramsTypes">
			<xsd:sequence>
				<xsd:element name="idlist" type="xsd:integer"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:element name="params" type="tns:paramsTypes"/>

		<xsd:complexType name="ListOfUser">
			<xsd:sequence>
				<xsd:element name="idlist" type="xsd:integer"/>
				<xsd:element maxOccurs="unbounded" name="list" type="tns:User"/>
			</xsd:sequence>
		</xsd:complexType>

		<xsd:complexType name="User">
			<xsd:sequence>
				<xsd:element maxOccurs="unbounded" name="roles" type="xsd:string"/>
				<xsd:element name="username" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:element name="ListOfUser" type="tns:ListOfUser"/>
	     </xsd:schema>
	
	     Python lists are represented like xml elements with the maxOccurs attribute unbounded.	
	
	     The soap request is:

	     <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:get="http://127.0.1.1:8080/UserRolesService/getUsers">
   		<soapenv:Header/>
   		<soapenv:Body>
      			<get:params>
         			<idlist>9010</idlist>
      			</get:params>
   		</soapenv:Body>
	     </soapenv:Envelope>

	     The soap response is:

	     <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
   		<soapenv:Header/>
   		<soapenv:Body>
      			<ListOfUser>
         			<idlist>9010</idlist>
         			<list>
            				<roles>ceo</roles>
            				<roles>admin</roles>
            				<username>steve</username>
         			</list>
         			<list>
            				<roles>developer</roles>
            				<username>billy</username>
         			</list>
      			</ListOfUser>
   		</soapenv:Body>
	     </soapenv:Envelope>
